/**
 * Implementation of basic graph algorithms,
 * such as BFS, DFS, topological sort, shortest path algorithm, minimum spanning tree algorithm.
 * Graph here is represented by adjacent list data structure.
 */

#ifndef GRAPH_H_
#define GRAPH_H_

#include <map>
#include <algorithm>
#include <climits>
#include <string>
#include <iostream>
#include <fstream>
#include <queue>

const int INFINITY = INT_MAX;
const int MAX_VERTEX_NUM = 20;

/**
 * Graph type
 * DG:	digraph
 * DN:	directed network
 * UDG: undigraph
 * UDN: undirected network
 */
typedef enum {UDG, UDN, DG, DN} GraphKind;	// 0, 1, 2, 3
typedef enum {WHITE, BLACK, GRAY} Color;	// Vertex or Edge's color propritity 

/**
 * Graph's edge/arc data structure
 */
template <typename Object>
class Edge {
	public:
		Object adjvex;
		Color color;
		float weight;
		Edge<Object> *nextEdge;
		
		/**
		 * Constructor
		 */
		Edge(Object d, float weight = 0.0, Edge<Object> *ne = NULL) 
			: adjvex(d), weight(weight), nextEdge(ne) {}
};

/**
 * Graph's vertex data structure
 */
template <typename Object>
class Vertex {
	public:
		Edge<Object> *firstEdge;	// Pointer to the vertex's first edge
		Object name;
		Color color;
		float weight;
		int start, finish;
		int nthDFSTree;
		/**
		 * Constructor 
		 */
		Vertex(Object name = Object(), float weight = 0.0, Color cr = WHITE, Edge<Object> *fe = NULL)
			: name(name), weight(weight), color(cr), firstEdge(fe) {}	
};


/**
 * Graph data structure
 */
template <typename Object>
class Graph {
	public:
		Graph(GraphKind gk = UDG, std::string str = "g");
		~Graph();
		void DFS(void visit(Object));
		void BFS(Object o, void visit(Object));
		void topologicalSort();
		void addVertex(Object, float weight = 0.0, Color cr = WHITE);
		void removeVertex(Object);
		void addEdge(Object, Object, float weight = 0.0);
		void removeEdge(Object, Object);
		bool isReachable(Object, Object) const;
		bool isContain(const Object&) const;
		void showGraph() const;
		bool isConnected();

		static void print(Object);
	
	private:
		GraphKind graphKind;
		std::map<Object, Vertex<Object> *> vertices;
 		std::string graphName;
		static int timer;	// Used by DFS to count each vertices's discover and finish time 
		static int dfsTreeNum;	// 	Used to count the number of trees generated by DFS

		void destroyGraph();
		void showUDG() const;
		void showUDN() const;
		void showDG() const;
		void showDN() const;
		void visitDFS(Object, void visit(Object), std::ofstream&);
			
};	

#include "graph.cc"

#endif // GRAPH_H_
